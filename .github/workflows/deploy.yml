name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
    
    - name: Build with Gradle
      run: |
        chmod +x gradlew
        ./gradlew clean build -x test --no-daemon -q
    
    - name: Verify JAR file
      run: |
        JAR_FILE="build/libs/bulletin-0.0.1-SNAPSHOT.jar"
        if [ ! -f "$JAR_FILE" ]; then
          echo "❌ JAR 파일을 찾을 수 없습니다!"
          exit 1
        fi
        JAR_SIZE=$(du -h "$JAR_FILE" | cut -f1)
        echo "✅ JAR 파일 확인: $JAR_SIZE"
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 5m
        debug: false
        script: |-
          set -e
          
          # 색상 정의
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m'
          
          APP_DIR="/opt/bulletin"
          JAR_FILE="bulletin-0.0.1-SNAPSHOT.jar"
          SERVICE_NAME="bulletin"
          
          echo -e "${GREEN}🚀 배포 시작${NC}"
          
          # 1. 디렉토리 생성
          sudo mkdir -p $APP_DIR/{logs,uploads/bulletin-images,uploads/sheet-music,uploads/small-groups}
          
          # 2. JAR 파일 백업 및 복사
          if [ -f "$APP_DIR/$JAR_FILE" ]; then
            sudo cp "$APP_DIR/$JAR_FILE" "$APP_DIR/${JAR_FILE}.backup.$(date +%s)"
            echo -e "${YELLOW}📦 기존 파일 백업 완료${NC}"
          fi
          
          sudo cp /tmp/$JAR_FILE $APP_DIR/$JAR_FILE
          sudo chown ec2-user:ec2-user $APP_DIR/$JAR_FILE
          sudo chmod 644 $APP_DIR/$JAR_FILE
          echo -e "${GREEN}✅ JAR 파일 복사 완료${NC}"
          
          # 3. 파일 소유권 설정
          sudo chown -R ec2-user:ec2-user $APP_DIR/uploads $APP_DIR/logs 2>/dev/null || true
          
          # 4. .env 파일 처리
          if [ ! -f "$APP_DIR/.env" ]; then
            echo -e "${YELLOW}📝 .env 파일 생성 중...${NC}"
            cat << 'ENVEOF' | sudo tee $APP_DIR/.env > /dev/null
# 데이터베이스 설정
DATABASE_URL=jdbc:postgresql://localhost:5432/bulletin
DB_USERNAME=postgres
DB_PASSWORD=your_password_here

# Cloudinary 설정
CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret

# 애플리케이션 설정
PORT=8080
ENVEOF
            sudo chown ec2-user:ec2-user $APP_DIR/.env
            sudo chmod 600 $APP_DIR/.env
            echo -e "${GREEN}✅ .env 파일 생성 완료 (수정 필요!)${NC}"
          fi
          
          # 5. 서비스 파일 업데이트 (존재하는 경우)
          if [ -f /tmp/bulletin.service ]; then
            sudo cp /tmp/bulletin.service /etc/systemd/system/bulletin.service
            sudo systemctl daemon-reload
            echo -e "${GREEN}✅ 서비스 파일 업데이트 완료${NC}"
          fi
          
          # 6. 서비스 존재 확인
          if [ ! -f /etc/systemd/system/bulletin.service ]; then
            echo -e "${RED}❌ 서비스 파일을 찾을 수 없습니다${NC}"
            exit 1
          fi
          
          # 7. 서비스 활성화 및 재시작
          sudo systemctl enable $SERVICE_NAME 2>/dev/null || true
          echo -e "${YELLOW}🔄 서비스 재시작 중...${NC}"
          sudo systemctl restart $SERVICE_NAME
          
          # 8. 서비스 시작 확인 (최대 30초 대기)
          for i in {1..30}; do
            if sudo systemctl is-active --quiet $SERVICE_NAME; then
              echo -e "${GREEN}✅ 서비스가 정상적으로 시작되었습니다 (${i}초)${NC}"
              break
            fi
            if [ $i -eq 30 ]; then
              echo -e "${RED}❌ 서비스 시작 실패 (타임아웃)${NC}"
              sudo journalctl -u $SERVICE_NAME -n 20 --no-pager
              exit 1
            fi
            sleep 1
          done
          
          # 9. 최종 상태 확인
          echo -e "${GREEN}📊 서비스 상태:${NC}"
          sudo systemctl status $SERVICE_NAME --no-pager | head -20
    
    - name: Copy JAR file
      run: |
        # SSH 키 파일 생성
        echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2_key.pem
        chmod 600 /tmp/ec2_key.pem
        
        # SSH 옵션
        SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 -o ConnectionAttempts=3"
        
        # JAR 파일 전송
        echo "📦 JAR 파일 전송 중..."
        scp $SSH_OPTS -i /tmp/ec2_key.pem \
          build/libs/bulletin-0.0.1-SNAPSHOT.jar \
          ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/tmp/ || {
          echo "❌ JAR 파일 전송 실패!"
          rm -f /tmp/ec2_key.pem
          exit 1
        }
        
        # 서비스 파일 전송 (선택적)
        if [ -f bulletin.service ]; then
          echo "📦 서비스 파일 전송 중..."
          scp $SSH_OPTS -i /tmp/ec2_key.pem \
            bulletin.service \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/tmp/ || true
        fi
        
        rm -f /tmp/ec2_key.pem
        echo "✅ 파일 전송 완료"
    
    - name: Verify deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        debug: false
        script: |
          SERVICE_NAME="bulletin"
          
          if sudo systemctl is-active --quiet $SERVICE_NAME; then
            echo "✅ 배포 성공: 서비스가 정상 실행 중입니다"
            echo ""
            echo "📊 서비스 상태:"
            sudo systemctl status $SERVICE_NAME --no-pager | head -15
          else
            echo "❌ 배포 실패: 서비스가 실행되지 않습니다"
            echo ""
            echo "📋 최근 로그:"
            sudo journalctl -u $SERVICE_NAME -n 30 --no-pager
            exit 1
          fi
