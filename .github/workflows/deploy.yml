name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
    
    - name: Build with Gradle
      run: |
        chmod +x gradlew
        ./gradlew clean build -x test --no-daemon -q
    
    - name: Locate JAR file
      id: jar
      run: |
        JAR=$(ls -1 build/libs/*SNAPSHOT*.jar 2>/dev/null | head -n1)
        if [ -z "$JAR" ]; then
          echo "❌ JAR 파일을 찾을 수 없습니다!"
          echo "build/libs 디렉토리 내용:"
          ls -la build/libs/ || echo "디렉토리가 없습니다"
          exit 1
        fi
        echo "jar=$JAR" >> $GITHUB_OUTPUT
        JAR_SIZE=$(du -h "$JAR" | cut -f1)
        echo "✅ JAR 파일 발견: $JAR ($JAR_SIZE)"
    
    - name: Verify EC2 connectivity
      env:
        HOST: ${{ secrets.EC2_HOST }}
      run: |
        echo "🔍 EC2 연결 테스트 중..."
        echo "대상 호스트: $HOST"
        
        # 포트 22 연결 테스트
        timeout 5 bash -c "</dev/tcp/$HOST/22" 2>/dev/null && echo "✅ 포트 22 열림" || echo "⚠️ 포트 22 연결 실패"
        
        # ping 테스트
        ping -c 2 $HOST 2>/dev/null && echo "✅ Ping 성공" || echo "⚠️ Ping 실패"
    
    - name: Copy files to EC2
      env:
        SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        echo "$SSH_KEY" > /tmp/ec2_key.pem
        chmod 600 /tmp/ec2_key.pem
        
        SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 -o ConnectionAttempts=5 -o ServerAliveInterval=10 -o ServerAliveCountMax=3 -v"
        
        # SSH 연결 테스트
        echo "🔍 SSH 연결 테스트 중..."
        ssh $SSH_OPTS -i /tmp/ec2_key.pem -o BatchMode=yes "$USERNAME@$HOST" "echo 'SSH 연결 성공'" || {
          echo "❌ SSH 연결 실패!"
          echo "디버깅 정보:"
          echo "- 호스트: $HOST"
          echo "- 사용자: $USERNAME"
          echo "- SSH 키 파일 존재: $(test -f /tmp/ec2_key.pem && echo '예' || echo '아니오')"
          rm -f /tmp/ec2_key.pem
          exit 1
        }
        
        # JAR 파일 전송 (재시도 로직)
        echo "📦 JAR 파일 전송 중..."
        SSH_OPTS_SCP="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 -o ConnectionAttempts=3"
        
        MAX_RETRIES=3
        RETRY_COUNT=0
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if scp $SSH_OPTS_SCP -i /tmp/ec2_key.pem \
            "${{ steps.jar.outputs.jar }}" \
            "$USERNAME@$HOST:/tmp/app.jar"; then
            echo "✅ JAR 파일 전송 성공"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "⚠️ 전송 실패 (시도 $RETRY_COUNT/$MAX_RETRIES)"
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              sleep 5
            else
              echo "❌ JAR 파일 전송 실패 (모든 재시도 실패)"
              rm -f /tmp/ec2_key.pem
              exit 1
            fi
          fi
        done
        
        # 서비스 파일 전송 (선택적)
        if [ -f bulletin.service ]; then
          echo "📦 서비스 파일 전송 중..."
          scp $SSH_OPTS_SCP -i /tmp/ec2_key.pem \
            bulletin.service \
            "$USERNAME@$HOST:/tmp/bulletin.service" || echo "⚠️ 서비스 파일 전송 실패 (계속 진행)"
        fi
        
        rm -f /tmp/ec2_key.pem
        echo "✅ 파일 전송 완료"
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 5m
        debug: false
        script: |-
          set -e
          
          # 색상 정의
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m'
          
          APP_DIR="/opt/bulletin"
          SERVICE_NAME="bulletin"
          RUN_USER="${{ secrets.EC2_USERNAME }}"
          
          echo -e "${GREEN}🚀 배포 시작${NC}"
          
          # 1. 디렉토리 생성
          sudo mkdir -p $APP_DIR/{logs,uploads/bulletin-images,uploads/sheet-music,uploads/small-groups}
          
          # 2. JAR 파일 존재 확인 및 복사
          if [ ! -f /tmp/app.jar ]; then
            echo -e "${RED}❌ JAR 파일을 찾을 수 없습니다: /tmp/app.jar${NC}"
            exit 1
          fi
          
          # 기존 JAR 백업 (존재하는 경우)
          if [ -f "$APP_DIR/app.jar" ]; then
            sudo cp "$APP_DIR/app.jar" "$APP_DIR/app.jar.backup.$(date +%s)"
            echo -e "${YELLOW}📦 기존 파일 백업 완료${NC}"
          fi
          
          sudo cp /tmp/app.jar $APP_DIR/app.jar
          sudo chmod 644 $APP_DIR/app.jar
          echo -e "${GREEN}✅ JAR 파일 복사 완료${NC}"
          
          # 3. 전체 디렉토리 소유권 설정 (서비스 실행 사용자)
          sudo chown -R $RUN_USER:$RUN_USER $APP_DIR
          echo -e "${GREEN}✅ 파일 소유권 설정 완료${NC}"
          
          # 4. .env 파일 생성/업데이트
          ENV_FILE="$APP_DIR/.env"
          sudo touch "$ENV_FILE"
          sudo chown $RUN_USER:$RUN_USER "$ENV_FILE"
          sudo chmod 600 "$ENV_FILE"
          
          # GitHub Secrets에서 값 가져오기 (있으면 덮어쓰기)
          write_kv() {
            key="$1"
            val="$2"
            if [ -n "$val" ]; then
              if sudo grep -q "^$key=" "$ENV_FILE"; then
                sudo sed -i "s|^$key=.*|$key=$val|" "$ENV_FILE"
              else
                echo "$key=$val" | sudo tee -a "$ENV_FILE" > /dev/null
              fi
            fi
          }
          
          write_kv "DATABASE_URL" "${{ secrets.DATABASE_URL }}"
          write_kv "DB_USERNAME" "${{ secrets.DB_USERNAME }}"
          write_kv "DB_PASSWORD" "${{ secrets.DB_PASSWORD }}"
          write_kv "CLOUDINARY_CLOUD_NAME" "${{ secrets.CLOUDINARY_CLOUD_NAME }}"
          write_kv "CLOUDINARY_API_KEY" "${{ secrets.CLOUDINARY_API_KEY }}"
          write_kv "CLOUDINARY_API_SECRET" "${{ secrets.CLOUDINARY_API_SECRET }}"
          write_kv "PORT" "8080"
          
          # 기본값 설정 (Secrets가 없을 경우)
          if ! sudo grep -q "^DATABASE_URL=" "$ENV_FILE"; then
            echo "# 데이터베이스 설정" | sudo tee -a "$ENV_FILE" > /dev/null
            echo "DATABASE_URL=jdbc:postgresql://localhost:5432/bulletin" | sudo tee -a "$ENV_FILE" > /dev/null
            echo "DB_USERNAME=postgres" | sudo tee -a "$ENV_FILE" > /dev/null
            echo "DB_PASSWORD=" | sudo tee -a "$ENV_FILE" > /dev/null
            echo "" | sudo tee -a "$ENV_FILE" > /dev/null
            echo "# Cloudinary 설정" | sudo tee -a "$ENV_FILE" > /dev/null
            echo "CLOUDINARY_CLOUD_NAME=" | sudo tee -a "$ENV_FILE" > /dev/null
            echo "CLOUDINARY_API_KEY=" | sudo tee -a "$ENV_FILE" > /dev/null
            echo "CLOUDINARY_API_SECRET=" | sudo tee -a "$ENV_FILE" > /dev/null
          fi
          
          echo -e "${GREEN}✅ .env 파일 설정 완료${NC}"
          
          # 5. 서비스 파일 업데이트 (사용자 동적 설정)
          if [ -f /tmp/bulletin.service ]; then
            # 서비스 파일에서 User/Group을 동적으로 변경
            sudo sed -i "s|^User=.*|User=$RUN_USER|" /tmp/bulletin.service
            sudo sed -i "s|^Group=.*|Group=$RUN_USER|" /tmp/bulletin.service
            sudo sed -i "s|/opt/bulletin/bulletin-0.0.1-SNAPSHOT.jar|/opt/bulletin/app.jar|" /tmp/bulletin.service
            sudo cp /tmp/bulletin.service /etc/systemd/system/bulletin.service
            sudo systemctl daemon-reload
            echo -e "${GREEN}✅ 서비스 파일 업데이트 완료${NC}"
          else
            # 서비스 파일이 없으면 생성
            if [ ! -f /etc/systemd/system/bulletin.service ]; then
              echo -e "${YELLOW}📝 서비스 파일 생성 중...${NC}"
              echo "[Unit]" | sudo tee /etc/systemd/system/bulletin.service > /dev/null
              echo "Description=교회 모바일 주보 시스템" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "After=network-online.target" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "Wants=network-online.target" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "[Service]" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "Type=simple" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "User=$RUN_USER" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "Group=$RUN_USER" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "WorkingDirectory=$APP_DIR" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "EnvironmentFile=$APP_DIR/.env" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "Environment=\"SPRING_PROFILES_ACTIVE=ec2\"" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "ExecStart=/usr/bin/java -Xms512m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -jar $APP_DIR/app.jar" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "ExecStop=/bin/kill -15 \$MAINPID" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "Restart=on-failure" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "RestartSec=10" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "StartLimitInterval=60" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "StartLimitBurst=3" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "StandardOutput=journal" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "StandardError=journal" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "SyslogIdentifier=bulletin" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "# 보안 설정" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "NoNewPrivileges=true" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "PrivateTmp=true" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "ProtectSystem=strict" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "ProtectHome=true" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "ReadWritePaths=$APP_DIR/uploads $APP_DIR/logs" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "# 리소스 제한" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "LimitNOFILE=65536" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "LimitNPROC=4096" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "MemoryLimit=2G" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "[Install]" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              echo "WantedBy=multi-user.target" | sudo tee -a /etc/systemd/system/bulletin.service > /dev/null
              sudo systemctl daemon-reload
              echo -e "${GREEN}✅ 서비스 파일 생성 완료${NC}"
            fi
          fi
          
          # 6. 서비스 존재 확인
          if [ ! -f /etc/systemd/system/bulletin.service ]; then
            echo -e "${RED}❌ 서비스 파일을 찾을 수 없습니다${NC}"
            exit 1
          fi
          
          # 7. 서비스 활성화 및 재시작
          sudo systemctl enable $SERVICE_NAME 2>/dev/null || true
          echo -e "${YELLOW}🔄 서비스 재시작 중...${NC}"
          sudo systemctl restart $SERVICE_NAME
          
          # 8. 서비스 시작 확인 (최대 30초 대기)
          for i in {1..30}; do
            if sudo systemctl is-active --quiet $SERVICE_NAME; then
              echo -e "${GREEN}✅ 서비스가 정상적으로 시작되었습니다 (${i}초)${NC}"
              break
            fi
            if [ $i -eq 30 ]; then
              echo -e "${RED}❌ 서비스 시작 실패 (타임아웃)${NC}"
              sudo journalctl -u $SERVICE_NAME -n 50 --no-pager
              exit 1
            fi
            sleep 1
          done
          
          # 9. 최종 상태 확인
          echo -e "${GREEN}📊 서비스 상태:${NC}"
          sudo systemctl status $SERVICE_NAME --no-pager | head -30
    
    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        debug: false
        script: |
          SERVICE_NAME="bulletin"
          
          if sudo systemctl is-active --quiet $SERVICE_NAME; then
            echo "✅ 배포 성공: 서비스가 정상 실행 중입니다"
            echo ""
            echo "📊 서비스 상태:"
            sudo systemctl status $SERVICE_NAME --no-pager | head -15
          else
            echo "❌ 배포 실패: 서비스가 실행되지 않습니다"
            echo ""
            echo "📋 최근 로그:"
            sudo journalctl -u $SERVICE_NAME -n 30 --no-pager
            exit 1
          fi
