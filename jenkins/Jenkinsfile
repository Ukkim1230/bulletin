pipeline {
    agent any
    
    environment {
        // 환경 변수 설정
        JAVA_HOME = 'C:\\work\\jdk-17.0.2'
        GRADLE_HOME = "${WORKSPACE}\\gradle"
        APP_NAME = 'youth-bulletin'
        DOCKER_IMAGE = "${APP_NAME}:${BUILD_NUMBER}"
        DEPLOY_PORT = '80'
    }
    
    tools {
        gradle 'Gradle-8.3'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '소스 코드 체크아웃 중...'
                checkout scm
                
                // Git 정보 출력
                script {
                    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    def gitBranch = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
                    echo "Git Commit: ${gitCommit}"
                    echo "Git Branch: ${gitBranch}"
                }
            }
        }
        
        stage('Environment Setup') {
            steps {
                echo '환경 설정 중...'
                script {
                    // Java 버전 확인
                    sh 'java -version'
                    
                    // Gradle 버전 확인
                    sh './gradlew --version'
                    
                    // 프로젝트 정보 출력
                    echo "프로젝트: 청년부 모바일 주보 시스템"
                    echo "빌드 번호: ${BUILD_NUMBER}"
                    echo "작업 공간: ${WORKSPACE}"
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'Gradle 빌드 시작...'
                script {
                    try {
                        // Gradle 빌드 실행
                        sh './gradlew clean build -x test'
                        echo '✅ 빌드 성공!'
                    } catch (Exception e) {
                        echo "❌ 빌드 실패: ${e.getMessage()}"
                        error "빌드가 실패했습니다."
                    }
                }
            }
            
            post {
                success {
                    echo '빌드 아티팩트 보관 중...'
                    archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Test') {
            steps {
                echo '테스트 실행 중...'
                script {
                    try {
                        sh './gradlew test'
                        echo '✅ 테스트 통과!'
                    } catch (Exception e) {
                        echo "⚠️ 테스트 실패: ${e.getMessage()}"
                        // 테스트 실패 시에도 배포는 계속 진행 (선택사항)
                    }
                }
            }
            
            post {
                always {
                    // 테스트 결과 발행
                    publishTestResults testResultsPattern: 'build/test-results/test/*.xml'
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'build/reports/tests/test',
                        reportFiles: 'index.html',
                        reportName: 'Test Report'
                    ])
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                echo 'Docker 이미지 빌드 중...'
                script {
                    try {
                        // Docker 이미지 빌드
                        sh "docker build -t ${DOCKER_IMAGE} ."
                        sh "docker tag ${DOCKER_IMAGE} ${APP_NAME}:latest"
                        echo "✅ Docker 이미지 빌드 완료: ${DOCKER_IMAGE}"
                    } catch (Exception e) {
                        echo "❌ Docker 빌드 실패: ${e.getMessage()}"
                        error "Docker 이미지 빌드가 실패했습니다."
                    }
                }
            }
        }
        
        stage('Stop Previous Container') {
            steps {
                echo '이전 컨테이너 중지 중...'
                script {
                    try {
                        // 실행 중인 컨테이너 중지 및 제거
                        sh "docker stop ${APP_NAME} || true"
                        sh "docker rm ${APP_NAME} || true"
                        echo '✅ 이전 컨테이너 정리 완료'
                    } catch (Exception e) {
                        echo "⚠️ 컨테이너 정리 중 오류 (정상적일 수 있음): ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo '새 컨테이너 배포 중...'
                script {
                    try {
                        // 새 컨테이너 실행
                        sh """
                            docker run -d \\
                                --name ${APP_NAME} \\
                                --restart unless-stopped \\
                                -p ${DEPLOY_PORT}:80 \\
                                -e SPRING_PROFILES_ACTIVE=prod \\
                                ${APP_NAME}:latest
                        """
                        
                        // 컨테이너 상태 확인
                        sleep(time: 10, unit: 'SECONDS')
                        sh "docker ps | grep ${APP_NAME}"
                        
                        echo "✅ 배포 완료! 포트 ${DEPLOY_PORT}에서 서비스 중"
                    } catch (Exception e) {
                        echo "❌ 배포 실패: ${e.getMessage()}"
                        error "배포가 실패했습니다."
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo '애플리케이션 헬스체크 중...'
                script {
                    def maxRetries = 10
                    def retryCount = 0
                    def healthCheckPassed = false
                    
                    while (retryCount < maxRetries && !healthCheckPassed) {
                        try {
                            sleep(time: 5, unit: 'SECONDS')
                            
                            // 헬스체크 API 호출
                            def response = sh(
                                script: "curl -f http://localhost:${DEPLOY_PORT}/api/bulletin/today",
                                returnStatus: true
                            )
                            
                            if (response == 0) {
                                healthCheckPassed = true
                                echo "✅ 헬스체크 성공! (시도 ${retryCount + 1}/${maxRetries})"
                            } else {
                                retryCount++
                                echo "⚠️ 헬스체크 대기 중... (시도 ${retryCount}/${maxRetries})"
                            }
                        } catch (Exception e) {
                            retryCount++
                            echo "⚠️ 헬스체크 실패: ${e.getMessage()} (시도 ${retryCount}/${maxRetries})"
                        }
                    }
                    
                    if (!healthCheckPassed) {
                        error "헬스체크에 실패했습니다. 애플리케이션이 제대로 시작되지 않았을 수 있습니다."
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                echo '이전 Docker 이미지 정리 중...'
                script {
                    try {
                        // 사용하지 않는 이미지 제거 (디스크 공간 절약)
                        sh "docker image prune -f"
                        echo '✅ Docker 이미지 정리 완료'
                    } catch (Exception e) {
                        echo "⚠️ 이미지 정리 중 오류: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo '파이프라인 완료'
            
            // 워크스페이스 정리
            cleanWs(
                cleanWhenNotBuilt: false,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true
            )
        }
        
        success {
            echo """
            🎉 배포 성공!
            
            📱 접속 주소:
            - 메인: http://localhost:${DEPLOY_PORT}/
            - 모바일: http://localhost:${DEPLOY_PORT}/mobile
            - API: http://localhost:${DEPLOY_PORT}/swagger-ui.html
            
            🔍 컨테이너 상태 확인:
            docker ps | grep ${APP_NAME}
            
            📋 로그 확인:
            docker logs ${APP_NAME}
            """
            
            // 성공 알림 (선택사항)
            // emailext (
            //     subject: "✅ 청년부 주보 배포 성공 - Build #${BUILD_NUMBER}",
            //     body: "배포가 성공적으로 완료되었습니다.\n\n접속 주소: http://localhost:${DEPLOY_PORT}/mobile",
            //     to: "admin@church.com"
            // )
        }
        
        failure {
            echo """
            ❌ 배포 실패!
            
            🔍 문제 해결:
            1. 빌드 로그 확인
            2. Docker 상태 확인: docker ps -a
            3. 애플리케이션 로그 확인: docker logs ${APP_NAME}
            """
            
            // 실패 알림 (선택사항)
            // emailext (
            //     subject: "❌ 청년부 주보 배포 실패 - Build #${BUILD_NUMBER}",
            //     body: "배포 중 오류가 발생했습니다. Jenkins 콘솔을 확인해주세요.",
            //     to: "admin@church.com"
            // )
        }
        
        unstable {
            echo '⚠️ 빌드는 성공했지만 일부 테스트가 실패했습니다.'
        }
    }
}
